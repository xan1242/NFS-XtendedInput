#pragma once
#include "NFS_XtendedInput.h"
#include "stdafx.h"

#define NO_PROFILE_SETTINGS

#define GAMEFLOWMANAGER_STATUS_ADDR 0x00925E90
#define UTL_ILIST_CONSTRUCTOR_ADDR 0x005D8660
#define UTL_ILIST_ADD_ADDR 0x005D7930
#define FEEDBACK_IHANDLE_ADDR 0x00621E10
#define PLAYER_ILISTABLE_ADDR 0x0092D84C
#define PLAYER_GETHUD_VTABLE_OFFSET 0x20
#define FENGHUD_ISVISIBLE_VTABLE_OFFSET 0x18

#define CFENG_INSTANCE_ADDR 0x0091CADC
#define CFENG_FINDPACKAGE_ADDR 0x00516AF0
#define CFENG_ISPACKAGEINCONTROL_ADDR 0x00516B90

#define GAME_HWND_ADDR 0x00982BF4

#define FEMOUSECURSOR_ISHIDDEN_ADDR 0x0091CFB9
#define FEMOUSECURSOR_X_ADDR 0x00987F54
#define FEMOUSECURSOR_Y_ADDR 0x00987F58
#define FEMOUSECURSOR_BUTTONPRESS_ADDR 0x0091F1D4
#define FEMOUSECURSOR_BUTTONPRESS2_ADDR 0x0091F1D5
#define FEMOUSECURSOR_BUTTONPRESS3_ADDR 0x0091F1D6

#define FEMOUSECURSOR_BUTTON2PRESS_ADDR 0x0091F14C
#define FEMOUSECURSOR_BUTTON2PRESS2_ADDR 0x0091F14D
#define FEMOUSECURSOR_BUTTON2PRESS3_ADDR 0x0091F14E

#define FEMOUSECURSOR_BUTTON3PRESS_ADDR 0x0091F1DC
#define FEMOUSECURSOR_BUTTON3PRESS2_ADDR 0x0091F1DD
#define FEMOUSECURSOR_BUTTON3PRESS3_ADDR 0x0091F1DE

#define FEMOUSEWHEEL_ADDR 0x00987F6C

#define FEMOUSECURSOR_CARORBIT_X_ADDR 0x00987F64
#define FEMOUSECURSOR_CARORBIT_Y_ADDR 0x00987F68

#define FE_SENDKEY_ADDR 0x5A95F0

#define GLOBAL_FASTMEM_ADDR 0x00925B30
#define FASTMEM_ALLOC_ADDR 0x005D29D0
#define FASTMEM_INITLISTALLOCATOR_ADDR 0x00635060
#define FASTMEM_LISTALLOCATOR_ADDR 0x00635250
#define STL_LIST_ADD_ADDR 0x645F10

#define INIT_LIST_ALLOC_SIZE 0x24

#define WNDPROC_POINTER_ADDR 0x6E6AF1

#define CARGUYSCAMERA_ADDR 0x00926134

#define FENG_FINDOBJECT_ADDR 0x00524850
#define FENG_SETVISIBLE_ADDR 0x00514CC0
#define FENG_SETINVISIBLE_ADDR 0x00514C70
#define FENG_SETLANGHASH_ADDR 0x00515C00

#define CREATERESOURCEFILE_ADDR 0x0065FD30
#define RESFILE_BEGINLOADING_ADDR 0x006616F0
#define SERVICERESOURCELOADING_ADDR 0x006626B0


#define FE_MOUSEUPDATER_CALLBACK_ADDR 0x005B85F0
#define FE_MOUSEUPDATER_CALLBACK_VT_ADDR 0x008A2CBC
#define FEPRINTF_ADDRESS 0x005253B0

#define FENG_HIDEPCOBJ_JMP_FROM 0x00516231
#define FENG_HIDEPCOBJ_JMP_TO 0x51625D
#define FENG_HIDEPCOBJ_VT_ADDR 0x0089B4A4
#define CFENG_RENDEROBJ_NOP_ADDR 0x005A45BD
#define CFENG_RENDEOBJ_NOP_AMOUNT 6
#define FENG_SETVISIBLE_NOP_ADDR 0x00514CCE
#define FENG_SHOWCASECAM_JMP_FROM 0x7A23C6
#define FENG_SHOWCASECAM_JMP_TO 0x7A23FF
#define WIN32_MOUSEHIDE_JMP_FROM 0x006E6CAC
#define WIN32_MOUSEHIDE_JMP_TO 0x6E6CBC
#define FEMOUSE_RENDER_JMP_FROM 0x0056FDC6
#define FEMOUSE_RENDER_JMP_TO 0x57055B
#define FEMOUSE_WHEEL_UPDATE_ADDR 0x006C9C88
#define REGISTERCLASSHOOK_CALL_ADDR 0x006E6B30
#define FEMOUSE_UPDATE_CALL_ADDR 0x006C9B60
#define DINPUT_KILL_ADDR 0x0063CC2B

#define INPUTMAPPING_CONSTRUCTOR_CALL_ADDR 0x00648116
#define INPUTDEVICE_FACTORY_INITIALIZER_ADDR 0x886B9D

#define FENGHUD_JOYHANDLER_JMP_FROM 0x0057C9F9
#define FENGHUD_JOYHANDLER_JMP_TO 0x0057C736

#define FE_SHOWCASE_FNG_NAME "Showcase.fng"
#define WORLDMAPMAIN_FNG_NAMEHASH 0x2FB2E4D3

#define PRESS_START_HOOK_ADDR 0x005A3147

#define DEBUGWORLDCAMERAMOVER_UPDATE_VT_ADDR 0x00894E08
unsigned int DebugWorldCameraMover_Update_Addr = 0x0047E7B0;

#define DEBUGWORLDCAMERAMOVER_CAVE1_ENTRY 0x0047E98E
#define DEBUGWORLDCAMERAMOVER_CAVE1_EXIT 0x0047E9B9
#define DEBUGWORLDCAMERAMOVER_CAVE1_FULLEXIT 0x047EB1B

#define DEBUGWORLDCAMERAMOVER_CAVE2_ENTRY 0x0047EA01
#define DEBUGWORLDCAMERAMOVER_CAVE2_EXIT 0x0047EA0C

#define DEBUGWORLDCAMERAMOVER_CONSTRUCTOR_ADDR 0x00476440
#define DEBUGWORLDCAMERAMOVER_CONSTRUCTOR_HOOK_ADDR 0x004817E5

#define DEBUGWORLDCAMERAMOVER_DESTRUCTOR_ADDR 0x476590
#define DEBUGWORLDCAMERAMOVER_DESTRUCTOR_HOOK_ADDR 0x0047AEC3

#define DEBUGWORLDCAMERAMOVER_XSPEED_OFFSET 0x90
#define DEBUGWORLDCAMERAMOVER_YSPEED_OFFSET 0x92

#define DEBUGWORLDCAMERAMOVER_STACK_OFFSET 0x1C
#define DEBUGWORLDCAMERAMOVER_STACK_OFFSET2 0x1C

// REBINDABLE ACTIONS -- these will change textures based on bindings
// all FE action definitions will be changeable
// CROSS
#define FE_ACCEPT_TEX_HASH NFS_HASH("CROSS")
// TRIANGLE
#define FE_CANCEL_TEX_HASH NFS_HASH("TRIANGLE")
// SQUARE
#define FE_BUTTON4_TEX_HASH NFS_HASH("SQUARE")
// CIRCLE
#define FE_BUTTON5_TEX_HASH NFS_HASH("CIRCLE")
// L1
#define FE_LTRIGGER_TEX_HASH NFS_HASH("L1")
// R1
#define FE_RTRIGGER_TEX_HASH NFS_HASH("R1")
// SELECT
#define FE_SELECT_TEX_HASH NFS_HASH("SELECT")
// START
#define FE_START_TEX_HASH NFS_HASH("START")
// R2 ???? where is this used in FE?
//#define FE_BUTTON0_TEX_HASH NFS_HASH("R2")
// L2
#define FE_BUTTON1_TEX_HASH NFS_HASH("L2")
// R3
#define FE_BUTTON2_TEX_HASH NFS_HASH("R3")
// L3
#define FE_BUTTON3_TEX_HASH NFS_HASH("L3")
// all actions below here will only be changeable UNLESS stated otherwise
// RIGHT_ANALOG -- will only read FRONTENDACTION_RUP for its binding
#define FE_RANALOG_TEX_HASH NFS_HASH("RIGHT_ANALOG")
// RIGHT_ANALOG_UP -- will read GAMEACTION_SHIFTUP (but since it's based on PS2 this MIGHT have to be GAMEACTION_GAS)
#define FE_RANALOG_UP_TEX_HASH NFS_HASH("RIGHT_ANALOG_UP")
// RIGHT_ANALOG_UP_SWEDISH
#define FE_RANALOG_UP_SWEDISH_TEX_HASH NFS_HASH("RIGHT_ANALOG_UP_SWEDISH")
// RIGHT_ANALOG_UP_FRENCH
#define FE_RANALOG_UP_FRENCH_TEX_HASH NFS_HASH("RIGHT_ANALOG_UP_FRENCH")
// RIGHT_ANALOG_DOWN -- will read GAMEACTION_SHIFTDOWN (but since it's based on PS2 this MIGHT have to be GAMEACTION_BRAKE)
#define FE_RANALOG_DOWN_TEX_HASH NFS_HASH("RIGHT_ANALOG_DOWN")
// RIGHT_ANALOG_DOWN_SWEDISH
#define FE_RANALOG_DOWN_SWEDISH_TEX_HASH NFS_HASH("RIGHT_ANALOG_DOWN_SWEDISH")
// RIGHT_ANALOG_DOWN_FRENCH
#define FE_RANALOG_DOWN_FRENCH_TEX_HASH NFS_HASH("RIGHT_ANALOG_DOWN_FRENCH")
// LEFT_ANALOG
#define FE_LANALOG_TEX_HASH NFS_HASH("LEFT_ANALOG")
// LEFT_ANALOG_UP
#define FE_LANALOG_UP_TEX_HASH NFS_HASH("LEFT_ANALOG_UP")
// LEFT_ANALOG_UP_SWEDISH
#define FE_LANALOG_UP_SWEDISH_TEX_HASH NFS_HASH("LEFT_ANALOG_UP_SWEDISH")
// LEFT_ANALOG_UP_FRENCH
#define FE_LANALOG_UP_FRENCH_TEX_HASH NFS_HASH("LEFT_ANALOG_UP_FRENCH")
// LEFT_ANALOG_DOWN
#define FE_LANALOG_DOWN_TEX_HASH NFS_HASH("LEFT_ANALOG_DOWN")
// LEFT_ANALOG_DOWN_SWEDISH
#define FE_LANALOG_DOWN_SWEDISH_TEX_HASH NFS_HASH("LEFT_ANALOG_DOWN_SWEDISH")
// LEFT_ANALOG_DOWN_FRENCH
#define FE_LANALOG_DOWN_FRENCH_TEX_HASH NFS_HASH("LEFT_ANALOG_DOWN_FRENCH")
// DPAD -- will only read FRONTENDACTION_UP
#define FE_DPAD_TEX_HASH NFS_HASH("DPAD")
// DPAD_UPDOWN -- will only read FRONTENDACTION_UP
#define FE_DPAD_UPDOWN_TEX_HASH NFS_HASH("DPAD_UPDOWN")
// DPAD_LEFTRIGHT -- will only read FRONTENDACTION_LEFT
#define FE_DPAD_LEFTRIGHT_TEX_HASH NFS_HASH("DPAD_LEFTRIGHT")
// DPAD_UP -- will read FRONTENDACTION_UP
#define FE_DPAD_UP_TEX_HASH NFS_HASH("DPAD_UP")
// DPAD_DOWN -- will read FRONTENDACTION_DOWN
#define FE_DPAD_DOWN_TEX_HASH NFS_HASH("DPAD_DOWN")
// DPAD_LEFT -- will read FRONTENDACTION_LEFT
#define FE_DPAD_LEFT_TEX_HASH NFS_HASH("DPAD_LEFT")
// DPAD_RIGHT -- will read FRONTENDACTION_RIGHT
#define FE_DPAD_RIGHT_TEX_HASH NFS_HASH("DPAD_RIGHT")

enum FEButtonTex
{
	FE_NULL_TEX,
	FE_ACCEPT_TEX,
	FE_CANCEL_TEX,
	FE_BUTTON4_TEX,
	FE_BUTTON5_TEX,
	FE_LTRIGGER_TEX,
	FE_RTRIGGER_TEX,
	FE_START_TEX,
	FE_SELECT_TEX,
	FE_BUTTON1_TEX,
	FE_BUTTON2_TEX,
	FE_BUTTON3_TEX,
	FE_RANALOG_TEX,
	FE_RANALOG_UP_TEX,
	FE_RANALOG_UP_SWEDISH_TEX,
	FE_RANALOG_UP_FRENCH_TEX,
	FE_RANALOG_DOWN_TEX,
	FE_RANALOG_DOWN_SWEDISH_TEX,
	FE_RANALOG_DOWN_FRENCH_TEX,
	FE_LANALOG_TEX,
	FE_LANALOG_UP_TEX,
	FE_LANALOG_UP_SWEDISH_TEX,
	FE_LANALOG_UP_FRENCH_TEX,
	FE_LANALOG_DOWN_TEX,
	FE_LANALOG_DOWN_SWEDISH_TEX,
	FE_LANALOG_DOWN_FRENCH_TEX,
	FE_DPAD_TEX,
	FE_DPAD_UPDOWN_TEX,
	FE_DPAD_LEFTRIGHT_TEX,
	FE_DPAD_UP_TEX,
	FE_DPAD_DOWN_TEX,
	FE_DPAD_LEFT_TEX,
	FE_DPAD_RIGHT_TEX,
	FE_TEX_HASH_COUNT
};

unsigned int FE_DefaultButtonTexHashes[FE_TEX_HASH_COUNT] =
{
	0,
	FE_ACCEPT_TEX_HASH,
	FE_CANCEL_TEX_HASH,
	FE_BUTTON4_TEX_HASH,
	FE_BUTTON5_TEX_HASH,
	FE_LTRIGGER_TEX_HASH,
	FE_RTRIGGER_TEX_HASH ,
	FE_START_TEX_HASH ,
	FE_SELECT_TEX_HASH ,
	FE_BUTTON1_TEX_HASH ,
	FE_BUTTON2_TEX_HASH ,
	FE_BUTTON3_TEX_HASH ,
	FE_RANALOG_TEX_HASH ,
	FE_RANALOG_UP_TEX_HASH ,
	FE_RANALOG_UP_SWEDISH_TEX_HASH ,
	FE_RANALOG_UP_FRENCH_TEX_HASH ,
	FE_RANALOG_DOWN_TEX_HASH ,
	FE_RANALOG_DOWN_SWEDISH_TEX_HASH ,
	FE_RANALOG_DOWN_FRENCH_TEX_HASH ,
	FE_LANALOG_TEX_HASH ,
	FE_LANALOG_UP_TEX_HASH ,
	FE_LANALOG_UP_SWEDISH_TEX_HASH ,
	FE_LANALOG_UP_FRENCH_TEX_HASH ,
	FE_LANALOG_DOWN_TEX_HASH ,
	FE_LANALOG_DOWN_SWEDISH_TEX_HASH ,
	FE_LANALOG_DOWN_FRENCH_TEX_HASH ,
	FE_DPAD_TEX_HASH ,
	FE_DPAD_UPDOWN_TEX_HASH ,
	FE_DPAD_LEFTRIGHT_TEX_HASH ,
	FE_DPAD_UP_TEX_HASH ,
	FE_DPAD_DOWN_TEX_HASH ,
	FE_DPAD_LEFT_TEX_HASH ,
	FE_DPAD_RIGHT_TEX_HASH
};

bool cFEng_IsPackageInControl_Fast(unsigned int pkg_name_hash);
int(*FEPrintf)(const char* pkg_name, void* FEObject, const char* format, ...) = (int(*)(const char*, void*, const char*, ...))FEPRINTF_ADDRESS;
void* (*FEngFindObject_Title)(char* pkg_name, unsigned int obj_hash) = (void* (*)(char*, unsigned int))FENG_FINDOBJECT_ADDR;

#define WS_SPLASH_FNG_HASH 0x40E2717D
#define SPLASH_FNG_HASH 0xAFEF0EB4

char* SplashPkgName = "MW_LS_Splash.fng";
char* WSSplashPkgName = "WS_MW_LS_Splash.fng";

int TitleScreenVisible()
{
	if ((*(int*)GAMEFLOWMANAGER_STATUS_ADDR == 3))
	{
		if (cFEng_IsPackageInControl_Fast(SPLASH_FNG_HASH))
			return 1;
		if (cFEng_IsPackageInControl_Fast(WS_SPLASH_FNG_HASH))
			return 2;
	}
	return 0;
}

void SetTitleScreenText()
{
	int title_screen_type = TitleScreenVisible();
	int obj_hash = 0xC6CC55A4;
	char* pkg_name = SplashPkgName;
	char* splash_txt = FE_SPLASH_TEXT_PC;

	if (title_screen_type)
	{
		if (title_screen_type == 2)
		{
			obj_hash = 0xC4DF3FF2;
			pkg_name = WSSplashPkgName;
		}

		if (LastControlledDevice == LASTCONTROLLED_CONTROLLER)
		{
			switch (ControllerIconMode)
			{
			case CONTROLLERICON_PS3:
				splash_txt = FE_SPLASH_TEXT_PS3;
				break;
			case CONTROLLERICON_XBOX360:
				splash_txt = FE_SPLASH_TEXT_XBOX360;
				break;
			case CONTROLLERICON_PS4:
				splash_txt = FE_SPLASH_TEXT_PS4;
				break;
			case CONTROLLERICON_XBOXONE:
			default:
				splash_txt = FE_SPLASH_TEXT_XBOX;
				break;
			}
		}

		FEPrintf(pkg_name, FEngFindObject_Title(pkg_name, obj_hash), splash_txt);
	}
}
